#!/usr/bin/env python3
"""
Script de validaci√≥n del pipeline 3D mejorado
Prueba tanto el script volum√©trico directo como la API completa
"""

import subprocess
import sys
import os
import time

def test_volumetric_script_direct():
    """Probar el script volum√©trico directamente"""
    print("=== Probando Script Volum√©trico Directo ===")
    
    input_image = "frontend/src/assets/cat.png"
    output_file = "test_direct_volumetric.obj"
    
    if not os.path.exists(input_image):
        print(f"‚ùå ERROR: Imagen no encontrada: {input_image}")
        return False
    
    cmd = [
        "scripts/ai3d/.venv/bin/python", 
        "scripts/ai3d/volumetric_generator.py",
        "--input", input_image,
        "--output", output_file,
        "--width", "80",
        "--depth", "60", 
        "--height", "50",
        "--resolution", "32",
        "--smoothing", "3",
        "--threshold", "0.3"
    ]
    
    print(f"Ejecutando: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print("‚úÖ Script ejecutado exitosamente")
            
            if os.path.exists(output_file):
                # Analizar el archivo OBJ
                with open(output_file, 'r') as f:
                    content = f.read()
                    lines = content.split('\n')
                    
                vertices = [line for line in lines if line.startswith('v ')]
                faces = [line for line in lines if line.startswith('f ')]
                
                print(f"üìä Archivo generado: {output_file}")
                print(f"   - V√©rtices: {len(vertices)}")
                print(f"   - Caras: {len(faces)}")
                print(f"   - Tama√±o: {len(content)} caracteres")
                
                # Mostrar las primeras l√≠neas para verificar calidad
                print(f"   - Primeras l√≠neas:")
                for line in lines[:5]:
                    if line.strip():
                        print(f"     {line}")
                        
                return len(vertices) > 8 and len(faces) > 12  # M√°s que una caja simple
            else:
                print(f"‚ùå ERROR: No se gener√≥ el archivo de salida")
                return False
        else:
            print(f"‚ùå ERROR: Script fall√≥ con c√≥digo {result.returncode}")
            print(f"STDOUT: {result.stdout}")
            print(f"STDERR: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå ERROR: Timeout - el script tard√≥ m√°s de 5 minutos")
        return False
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        return False

def test_api_endpoint():
    """Probar la API endpoint (requiere backend corriendo)"""
    print("\n=== Probando API Endpoint ===")
    
    try:
        import requests
    except ImportError:
        print("‚ùå ERROR: requests no est√° instalado")
        return False
    
    url = 'http://localhost:8000/api/volumetric3d'
    image_path = 'frontend/src/assets/cat.png'
    
    if not os.path.exists(image_path):
        print(f"‚ùå ERROR: Imagen no encontrada: {image_path}")
        return False
    
    print(f"Probando API: {url}")
    
    try:
        # Verificar que el backend est√© corriendo
        health_response = requests.get('http://localhost:8000/', timeout=5)
        print("‚úÖ Backend est√° corriendo")
    except requests.exceptions.RequestException:
        print("‚ùå ERROR: Backend no est√° corriendo en localhost:8000")
        print("   Por favor inicia el backend con: cd backend && deno run --allow-all mod.ts")
        return False
    
    try:
        with open(image_path, 'rb') as image_file:
            files = {'image': image_file}
            data = {
                'widthMM': '80',
                'depthMM': '60', 
                'heightMM': '50',
                'resolutionLevel': '32',
                'smoothingIterations': '3',
                'volumeThreshold': '0.3'
            }
            
            print("üì§ Enviando petici√≥n a API...")
            response = requests.post(url, files=files, data=data, timeout=300)
            
            if response.status_code == 200:
                print("‚úÖ API respondi√≥ exitosamente")
                print(f"üìä Respuesta recibida: {len(response.text)} caracteres")
                
                # Guardar resultado
                output_file = 'test_api_volumetric.obj'
                with open(output_file, 'w') as f:
                    f.write(response.text)
                
                # Analizar contenido
                lines = response.text.split('\n')
                vertices = [line for line in lines if line.startswith('v ')]
                faces = [line for line in lines if line.startswith('f ')]
                
                print(f"   - V√©rtices: {len(vertices)}")
                print(f"   - Caras: {len(faces)}")
                print(f"   - Archivo guardado: {output_file}")
                
                # Mostrar primeras l√≠neas
                print("   - Primeras l√≠neas:")
                for line in lines[:5]:
                    if line.strip():
                        print(f"     {line}")
                        
                return len(vertices) > 8 and len(faces) > 12
            else:
                print(f"‚ùå ERROR: API fall√≥ con c√≥digo {response.status_code}")
                print(f"Respuesta: {response.text}")
                return False
                
    except requests.exceptions.Timeout:
        print("‚ùå ERROR: Timeout - la API tard√≥ m√°s de 5 minutos")
        return False
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        return False

def check_environment():
    """Verificar que el entorno est√© configurado correctamente"""
    print("=== Verificando Entorno ===")
    
    # Verificar Python virtual environment
    venv_python = "scripts/ai3d/.venv/bin/python"
    if not os.path.exists(venv_python):
        print(f"‚ùå ERROR: Entorno virtual no encontrado: {venv_python}")
        return False
    print(f"‚úÖ Entorno virtual encontrado: {venv_python}")
    
    # Verificar dependencias principales
    try:
        result = subprocess.run([venv_python, "-c", "import open3d, numpy, cv2"], 
                              capture_output=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ Dependencias principales disponibles (open3d, numpy, cv2)")
        else:
            print("‚ùå ERROR: Faltan dependencias principales")
            return False
    except Exception as e:
        print(f"‚ùå ERROR verificando dependencias: {e}")
        return False
    
    # Verificar script volum√©trico
    script_path = "scripts/ai3d/volumetric_generator.py"
    if not os.path.exists(script_path):
        print(f"‚ùå ERROR: Script no encontrado: {script_path}")
        return False
    print(f"‚úÖ Script volum√©trico encontrado: {script_path}")
    
    # Verificar imagen de test
    test_image = "frontend/src/assets/cat.png"
    if not os.path.exists(test_image):
        print(f"‚ùå ERROR: Imagen de test no encontrada: {test_image}")
        return False
    print(f"‚úÖ Imagen de test encontrada: {test_image}")
    
    return True

def main():
    print("üöÄ Pipeline 3D Volum√©trico - Test Completo")
    print("=" * 50)
    
    # Verificar entorno
    if not check_environment():
        print("\n‚ùå ENTORNO NO V√ÅLIDO - Corrige los errores antes de continuar")
        sys.exit(1)
    
    # Probar script directo
    script_success = test_volumetric_script_direct()
    
    # Probar API
    api_success = test_api_endpoint()
    
    # Resumen
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 50)
    print(f"Script Volum√©trico Directo: {'‚úÖ √âXITO' if script_success else '‚ùå FALLO'}")
    print(f"API Endpoint: {'‚úÖ √âXITO' if api_success else '‚ùå FALLO'}")
    
    if script_success and api_success:
        print("\nüéâ ¬°PIPELINE 3D COMPLETAMENTE FUNCIONAL!")
        print("   - Genera modelos volum√©tricos complejos")
        print("   - API backend integrada correctamente")
        print("   - Listo para uso en producci√≥n")
    elif script_success:
        print("\n‚ö†Ô∏è  PIPELINE PARCIALMENTE FUNCIONAL")
        print("   - Script volum√©trico funciona correctamente")
        print("   - Problema con integraci√≥n API - verificar backend")
    else:
        print("\n‚ùå PIPELINE CON PROBLEMAS CR√çTICOS")
        print("   - Revisar configuraci√≥n del entorno Python")
        print("   - Verificar dependencias instaladas")
    
    print("\nüîß Para usar en producci√≥n:")
    print("   1. Inicia backend: cd backend && deno run --allow-all mod.ts")
    print("   2. Inicia frontend: cd frontend && npm start")
    print("   3. Navega a http://localhost:4200")

if __name__ == "__main__":
    main()
